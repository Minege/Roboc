Index: cartes/facile.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cartes/facile.txt	(revision c0a2e74744fdd5ddaa60912ae58c0ae2d4880c9c)
+++ cartes/facile.txt	(revision )
@@ -1,0 +1,0 @@
Index: roboc.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- roboc.py	(revision c0a2e74744fdd5ddaa60912ae58c0ae2d4880c9c)
+++ Roboc.py	(revision )
@@ -8,21 +8,28 @@
 
 import os
 
+import Carte
+
 # On charge les cartes existantes
 cartes = []
+i = 0
 for nom_fichier in os.listdir("cartes"):
     if nom_fichier.endswith(".txt"):
         chemin = os.path.join("cartes", nom_fichier)
         nom_carte = nom_fichier[:-3].lower()
         with open(chemin, "r") as fichier:
             contenu = fichier.read()
-            # Création d'une carte, à compléter
-
+            a = Carte(nom_carte, contenu)
+            cartes[i] = a
+        i += 1
+del i
 # On affiche les cartes existantes
+
 print("Labyrinthes existants :")
 for i, carte in enumerate(cartes):
     print("  {} - {}".format(i + 1, carte.nom))
 
+# c.demander_carte(cartes)
 # Si il y a une partie sauvegardée, on l'affiche, à compléter
 
-# ... Complétez le programme ..
+# TODO: Mettre la syncronisation de parties quand le joueur a pas terminé une partie
Index: carte.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- carte.py	(revision c0a2e74744fdd5ddaa60912ae58c0ae2d4880c9c)
+++ Carte.py	(revision )
@@ -2,13 +2,29 @@
 
 """Ce module contient la classe Carte."""
 
-
+import Labyrinthe
 class Carte:
     """Objet de transition entre un fichier et un labyrinthe."""
 
     def __init__(self, nom, chaine):
         self.nom = nom
-        self.labyrinthe = creer_labyrinthe_depuis_chaine(chaine)
+        self.labyrinthe = self.creer_labyrinthe_depuis_chaine(chaine)
 
     def __repr__(self):
         return "<Carte {}>".format(self.nom)
+
+    def demander_carte(self, cartes):
+        try:
+            choix = input("Choisisez une carte : ")
+            choix = int(choix)
+
+        except ValueError:
+            print("Tu dois entrer un numéro !")
+            return self.demander_carte()
+        except TypeError:
+            print("Tu dois entrer un numéro !")
+            return self.demander_carte()
+
+    def creer_labyrinthe_depuis_chaine(self, ch):
+        l = Labyrinthe("X", ch)
+        return l
Index: labyrinthe.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- labyrinthe.py	(revision c0a2e74744fdd5ddaa60912ae58c0ae2d4880c9c)
+++ Labyrinthe.py	(revision )
@@ -9,4 +9,5 @@
     def __init__(self, robot, obstacles):
         self.robot = robot
         self.grille = {}
+        self.obstacles = obstacles
         # ...
Index: cartes/foret.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cartes/foret.txt	(revision c0a2e74744fdd5ddaa60912ae58c0ae2d4880c9c)
+++ cartes/foret.txt	(revision )
@@ -1,0 +1,0 @@
Index: cartes/prison.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cartes/prison.txt	(revision c0a2e74744fdd5ddaa60912ae58c0ae2d4880c9c)
+++ cartes/prison.txt	(revision )
@@ -1,0 +1,0 @@
